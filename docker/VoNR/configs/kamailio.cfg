#!KAMAILIO
#
# Unified Kamailio config for I-CSCF, P-CSCF, and S-CSCF
#

####### Defined Values #########
#!define FLT_CAPTURE 1
#!define FLT_DIALOG 2
#!define DLG_TIMEOUT_AVP "i:1"
#!define RR_CUSTOM_USER_AVP "i:2"
#!define DISPATCHER_DST_AVP "i:3"
#!define DISPATCHER_GRP_AVP "i:4"
#!define DISPATCHER_CNT_AVP "i:5"
#!define DISPATCHER_SOCK_AVP "i:6"

####### Global Parameters #########
debug=2
log_stderror=no
sip_warning=no
user_agent_header="User-Agent: Kamailio IMS (I/P/S-CSCF)"
server_header="Server: Kamailio IMS (I/P/S-CSCF)"
auto_aliases=no
dns_srv_lb=on
dns_try_ipv6=on
dns_try_naptr=on
disable_tcp=no
tcp_connection_lifetime=3615
children=4

system.shutdownmode = 0 desc "System shutdown mode"
system.service = "IMS (I/P/S-CSCF)" desc "Function of this server"

# Bind to VoNR IP and ports
listen=udp:10.53.3.4:5060
listen=tcp:10.53.3.4:5061
listen=udp:10.53.3.4:3868  # Diameter

# Module loading
mpath="/usr/lib64/kamailio/modules_k/:/usr/lib64/kamailio/modules/:/usr/lib/kamailio/modules_k/:/usr/lib/kamailio/modules/:/usr/lib/x86_64-linux-gnu/kamailio/modules/:/usr/local/lib64/kamailio/modules"
loadmodule "tm.so"
loadmodule "pv.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "ims_dialog.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "maxfwd.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "siputils.so"
loadmodule "kex.so"
loadmodule "tmx.so"
loadmodule "pike.so"
loadmodule "cdp.so"
loadmodule "cdp_avp.so"
loadmodule "ims_icscf.so"
loadmodule "ims_usrloc_pcscf.so"
loadmodule "ims_ipsec_pcscf.so"
loadmodule "ims_registrar_pcscf.so"
loadmodule "ims_usrloc_scscf.so"
loadmodule "ims_registrar_scscf.so"
loadmodule "ims_auth.so"
loadmodule "ims_isc.so"

# Module parameters (simplified)
modparam("tm", "fr_timer", 10000)
modparam("tm", "fr_inv_timer", 120000)
modparam("tm", "auto_inv_100", 0)
modparam("rr", "enable_full_lr", 1)
modparam("rr", "append_fromtag", 1)
modparam("rr", "add_username", 1)
modparam("rr", "custom_user_avp", "$avp(RR_CUSTOM_USER_AVP)")
modparam("cdp", "config_file", "/etc/kamailio/icscf.xml")
modparam("ims_icscf", "cxdx_dest_realm", "ims.mnc001.mcc001.3gppnetwork.org")
modparam("ims_icscf", "db_url", "cluster://cluster1")  # Simulé, ajuste selon MongoDB
modparam("ims_usrloc_pcscf", "db_url", "cluster://cluster1")
modparam("ims_usrloc_scscf", "db_url", "cluster://cluster1")
modparam("ims_auth", "cxdx_dest_realm", "ims.mnc001.mcc001.3gppnetwork.org")
modparam("ims_registrar_scscf", "default_expires", 604800)
modparam("ims_isc", "my_uri", "sip:scscf.ims.mnc001.mcc001.3gppnetwork.org:6060")

# Routing logic (simplified, combine I/P/S-CSCF routes)
route {
    # Initial checks
    route(REQINIT);

    if (is_method("REGISTER")) {
        route(REGISTER);
        exit;
    }

    if (is_method("NOTIFY") && search("^(Event|o)([ \t]*):([ \t]*)reg")) {
        route(NOTIFY);
        exit;
    }

    if (is_method("INVITE|SUBSCRIBE|MESSAGE|INFO|PUBLISH|CANCEL")) {
        route(INITIAL_REQUEST);
    } else {
        send_reply("406", "Method not allowed");
        exit;
    }
}

route[REQINIT] {
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483", "Too Many Hops");
        exit;
    }
    if (!sanity_check("1511", "7")) {
        xlog("Malformed SIP message from $si:$sp\n");
        exit;
    }
    if (!has_totag() && ($sel(cfg_get.system.shutdownmode) > 0)) {
        send_reply("503", "Server shutting down");
        exit;
    }
    if (is_method("OPTIONS") && (uri==myself)) {
        options_reply();
        exit;
    }
    if (t_lookup_request()) {
        exit;
    }
    if (is_method("INVITE|REGISTER")) {
        send_reply("100", "Trying");
    }
}

route[REGISTER] {
    if (!ims_www_authenticate("$td")) {
        ims_www_challenge("REG_MAR_REPLY", "$td", "MD5");
        exit;
    }
    if (!impu_registered("location")) {
        save("PRE_REG_SAR_REPLY", "location");
    } else {
        isc_match_filter_reg("1", "location");
        save("REG_SAR_REPLY", "location");
    }
    exit;
}

route[INITIAL_REQUEST] {
    loose_route();
    if (has_totag()) {
        route(WITHINDLG);
        exit;
    }
    if ($route_uri =~ "sip:orig@.*") {
        route(ORIG);
    } else {
        route(TERM);
    }
}

route[WITHINDLG] {
    if (loose_route()) {
        t_relay();
        exit;
    }
    sl_send_reply("404", "Not here");
    exit;
}

route[ORIG] {
    set_dlg_profile("orig");
    if (is_method("INVITE|SUBSCRIBE")) {
        $avp(RR_CUSTOM_USER_AVP)="mo";
        record_route();
    }
    t_newtran();
    if (!isc_from_as("orig")) {
        remove_hf("P-Asserted-Identity");
        append_hf("P-Asserted-Identity: <sip:$fU@ims.mnc001.mcc001.3gppnetwork.org>\r\n");
    }
    t_relay();
}

route[TERM] {
    set_dlg_profile("term");
    if (is_method("INVITE|SUBSCRIBE")) {
        $avp(RR_CUSTOM_USER_AVP)="mt";
        record_route();
    }
    if (!term_impu_registered("location")) {
        assign_server_unreg("UNREG_SAR_REPLY", "location", "term");
        exit;
    }
    t_relay();
}

# Ajoute les routes supplémentaires (REG_MAR_REPLY, PRE_REG_SAR_REPLY, etc.) selon les fichiers I/P/S-CSCF fournis