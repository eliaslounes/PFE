#
# Copyright 2013-2025 Software Radio Systems Limited
#
# By using this file, you agree to the terms and conditions set
# forth in the LICENSE file which can be found at the top level of
# the distribution.
#

include:
  - project: softwareradiosystems/ci/tools
    ref: "20"
    file: .gitlab/ci-shared/setup/all.yml
  - project: softwareradiosystems/ci/tools
    ref: "20"
    file: .gitlab/ci-shared/tools/python.yml
  - project: softwareradiosystems/ci/tools
    ref: "20"
    file: .gitlab/ci-shared/tools/docker.yml

################################################################################
# Stages
################################################################################
stages:
  - ci
  - static
  - compose
  - publish

variables:
  PY_DIR: docker/metrics_server

.gnb-docker:
  - changes: &srs_container_changes
      paths:
        - docker/scripts/**/*
        - docker/Dockerfile

################################################################################
# Static
################################################################################
no docker changes:
  stage: static
  image: alpine:3.16.0
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $ON_MR
      changes:
        - docker/docker-compose.yml
        - docker/.env
        - docker/Dockerfile
        - docker/metrics_server/**/*
        - docker/open5gs/**/*
        - docker/grafana/**/*
        - docker/scripts/**/*
      when: never
    - if: $ON_MR
  script:
    - echo "Nothing to check"

metrics tox:
  extends: .tox
  stage: static
  variables:
    GIT_LFS_SKIP_SMUDGE: 1
  rules:
    - if: $ON_MR
      changes:
        - docker/metrics_server/**/*

grafana version changed:
  extends: .version_changed_pyproject
  variables:
    GIT_LFS_SKIP_SMUDGE: 1
  stage: static
  rules:
    - if: $ON_MR
      changes:
        - docker/grafana/**/*
  script:
    - NEW_VERSION=$(cat docker/grafana/version.yml | grep SRS_GRAFANA_VERSION | cut -d'"' -f2)
    - export NEW_VERSION
    - |
      git checkout $CI_MERGE_REQUEST_DIFF_BASE_SHA
      if [ ! -e "docker/grafana/version.yml" ]; then
          exit 0
      fi
    - OLD_VERSION=$(cat docker/grafana/version.yml | grep SRS_GRAFANA_VERSION | cut -d'"' -f2)
    - export OLD_VERSION
    - |
      echo "OLD version: $OLD_VERSION -- NEW version: $NEW_VERSION"
    - python3 -c "import semver; import os; exit(0) if (semver.compare(os.environ['NEW_VERSION'], os.environ['OLD_VERSION']) > 0) else exit(1)"

metrics version changed:
  extends: .version_changed_pyproject
  stage: static
  variables:
    GIT_LFS_SKIP_SMUDGE: 1
  rules:
    - if: $ON_MR
      changes:
        - docker/metrics_server/**/*

metrics version check in retina:
  extends: metrics version changed
  script:
    - |
      VERSION_IN_PYPROJECT=$(cat docker/metrics_server/pyproject.toml | grep '^version' | cut -d'"' -f2)
      VERSION_IN_RETINA=$(cat .gitlab/ci/e2e/.env | grep METRICS_SERVER_VERSION | cut -d'=' -f2)
      echo "pyproject.toml version: $VERSION_IN_PYPROJECT -- retina .env version: $VERSION_IN_RETINA"
    - |
      export VERSION_IN_PYPROJECT
      export VERSION_IN_RETINA
    - python3 -c "import semver; import os; exit(semver.compare(os.environ['VERSION_IN_RETINA'], os.environ['VERSION_IN_PYPROJECT']))"

################################################################################
# Docker Compose
################################################################################
.docker compose:
  stage: compose
  image: docker:24.0.7-dind
  tags:
    - amd64-avx2
  timeout: 2h
  retry: 2
  variables:
    GIT_LFS_SKIP_SMUDGE: 1
    KUBERNETES_CPU_REQUEST: ${SRS_CPU_LIMIT}
    KUBERNETES_CPU_LIMIT: ${SRS_CPU_LIMIT}
    KUBERNETES_MEMORY_REQUEST: ${SRS_MEMORY_LIMIT}
    KUBERNETES_MEMORY_LIMIT: ${SRS_MEMORY_LIMIT}
  before_script: &docker_setup
    - dockerd-entrypoint.sh &
    - |
      while ! ( nc -zv localhost 2376 2>&1 >/dev/null )
      do
          sleep 1
      done

gnb docker compose:
  extends: .docker compose
  variables:
    DOCKER_UHD_VERSION: "4.7.0.0"
    DOCKER_DPDK_VERSION: "23.11.1"
  rules:
    - if: $ON_MR
      changes:
        <<: *srs_container_changes
    - if: $ON_MR
      changes:
        paths:
          - docker/docker-compose.yml
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      interruptible: false
  before_script:
    - *docker_setup
  script:
    - docker compose -f docker/docker-compose.yml build --build-arg NUM_JOBS=${KUBERNETES_CPU_LIMIT} --build-arg UHD_VERSION=${DOCKER_UHD_VERSION} --build-arg DPDK_VERSION=${DOCKER_DPDK_VERSION} gnb
    - sh -c "docker compose -f docker/docker-compose.yml run --no-deps gnb which srscu"
    - sh -c "docker compose -f docker/docker-compose.yml run --no-deps gnb which srsdu"
    - sh -c "docker compose -f docker/docker-compose.yml run --no-deps gnb which srsdu_split_8"
    - sh -c "docker compose -f docker/docker-compose.yml run --no-deps gnb which srsdu_split_7_2"
    - sh -c "docker compose -f docker/docker-compose.yml run --no-deps gnb which gnb"
    - sh -c "docker compose -f docker/docker-compose.yml run --no-deps gnb which gnb_split_8"
    - sh -c "docker compose -f docker/docker-compose.yml run --no-deps gnb which gnb_split_7_2"
    - sh -c "docker compose -f docker/docker-compose.yml run --no-deps gnb which ru_emulator"
    - sh -c "docker compose -f docker/docker-compose.yml run --no-deps gnb gnb cu_cp amf --no_core=true ru_sdr --device_driver uhd | grep 'Failed to open device with address'"
    - sh -c "docker compose -f docker/docker-compose.yml run --no-deps gnb gnb cu_cp amf --no_core=true hal --eal_args='--help'"

5gc docker compose:
  extends: .docker compose
  rules:
    - if: $ON_MR
      changes:
        paths:
          - docker/open5gs/**/*
          - docker/docker-compose.yml
    - if: $CI_DESCRIPTION =~ /Weekly/
      interruptible: false
  script:
    - docker compose -f docker/docker-compose.yml build --build-arg NUM_JOBS=${KUBERNETES_CPU_LIMIT} 5gc
    - docker compose -f docker/docker-compose.yml run 5gc 5gc -v

grafana docker compose:
  extends: .docker compose
  rules:
    - if: $ON_MR
      changes:
        paths:
          - docker/.env
          - docker/grafana/**/*
          - docker/docker-compose.yml
    - if: $CI_DESCRIPTION =~ /Weekly/
      interruptible: false
  script:
    - docker compose -f docker/docker-compose.yml run --no-deps grafana --version

influxdb docker compose:
  extends: .docker compose
  rules:
    - if: $ON_MR
      changes:
        paths:
          - docker/.env
          - docker/docker-compose.yml
    - if: $CI_DESCRIPTION =~ /Weekly/
      interruptible: false
  script:
    - docker compose -f docker/docker-compose.yml run influxdb influx version

metrics-server docker compose:
  extends: .docker compose
  rules:
    - if: $ON_MR
      changes:
        paths:
          - docker/.env
          - docker/metrics_server/**/*
          - docker/docker-compose.yml
    - if: $CI_DESCRIPTION =~ /Weekly/
      interruptible: false
  script:
    - docker compose -f docker/docker-compose.yml run metrics-server metrics-server --help

################################################################################
# Publish
################################################################################
metrics server image:
  extends: .docker-builder
  stage: publish
  rules:
    - if: $ON_MR
      changes:
        paths:
          - docker/metrics_server/**/*
  variables:
    GIT_LFS_SKIP_SMUDGE: 1
    REGISTRY_URI: $GITLAB_REGISTRY_URI
    NAME: metrics_server
    CONTEXT: ${CI_PROJECT_DIR}/docker/metrics_server
    MODE: publish
  before_script:
    - |
      export VERSION=$(cat ${CONTEXT}/pyproject.toml | grep '^version' | cut -d'"' -f2)

metrics server image latest:
  extends: metrics server image
  variables:
    OVERWRITE: "true"
  before_script:
    - |
      export VERSION=latest

grafana server image:
  extends: .docker-builder
  stage: publish
  rules:
    - if: $ON_MR
      changes:
        paths:
          - docker/grafana/**/*
  variables:
    GIT_LFS_SKIP_SMUDGE: 1
    REGISTRY_URI: $GITLAB_REGISTRY_URI
    NAME: grafana
    CONTEXT: ${CI_PROJECT_DIR}/docker/grafana
    MODE: publish
  before_script:
    - |
      export VERSION=$(cat docker/grafana/version.yml | grep SRS_GRAFANA_VERSION | cut -d'"' -f2)

grafana server image latest:
  extends: grafana server image
  variables:
    OVERWRITE: "true"
  before_script:
    - |
      export VERSION=latest
