#
# Copyright 2013-2025 Software Radio Systems Limited
#
# By using this file, you agree to the terms and conditions set
# forth in the LICENSE file which can be found at the top level of
# the distribution.
#

include:
  - project: softwareradiosystems/ci/tools
    ref: "20"
    file: .gitlab/ci-shared/setup/all.yml
  - local: .gitlab/ci-shared/e2e.yml

.txrx-lib: &txrx-lib
  - job: "build trx driver"
    optional: true
    artifacts: true
  - job: "build amariue zmq driver"
    optional: true
    artifacts: true

load retina variables:
  extends: .load retina variables
  rules:
    - if: $TESTBED == "none"
      when: never
    - if: $ON_MR
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
    - if: $ON_WEB
    - if: $ON_API
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    SRSRANDIR: $CI_PROJECT_DIR

e2e request and config validation:
  stage: static
  extends:
    - .prepare_test
  rules:
    - if: $ON_MR
      changes:
        - .gitlab/ci/e2e/**/*
        - tests/e2e/tests/viavi/*
  image:
    name: ${RETINA_REGISTRY_PREFIX}/launcher:${RETINA_VERSION}
    entrypoint: ["/bin/sh", "-c"]
  script:
    - |
      cd ${CI_PROJECT_DIR}/.gitlab/ci/e2e
      file_list=$(ls *.yml)
      for f in $file_list; do
          retina-request-checker --input $f
      done
      python3 ${CI_PROJECT_DIR}/tests/e2e/tests/viavi/validate_test_declaration.py
  needs: &retina-needs
    - job: "load retina variables"
      artifacts: true

.e2e-run:
  extends: .e2e-run-template
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
  variables:
    SRSRANDIR: $CI_PROJECT_DIR
  needs:
    - *retina-needs

custom e2e:
  stage: manual
  extends: .e2e-run
  rules:
    - if: $TESTBED == "none"
      when: never
    - if: $ON_WEB
    - if: $ON_API
  timeout: 28 hours
  needs:
    - *retina-needs
    - custom build
    - build trx driver
  interruptible: false # Web jobs are standalone

################################################################################
# ZMQ
################################################################################

smoke zmq:
  extends: .e2e-run
  stage: manual
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
    - if: $ON_MR
      when: manual
      allow_failure: false
  interruptible: true
  variables:
    TESTBED: "" # Check before_script
    MARKERS: smoke
    PYTEST_ARGS: -x ${EXTRA_SMOKE_ZMQ}
    RETINA_PARAM_ARGS: gnb.all.pcap=True gnb.all.mac_enable=True gnb.all.rlc_enable=True gnb.all.enable_integrity_protection=True
    E2E_LOG_LEVEL: info
  before_script:
    - |
      export TESTBED=zmq
      if [ -n "${EXTRA_SMOKE_ZMQ}" ]; then
        export TESTBED=zmq_smoke
      fi
  timeout: 1 hour
  needs:
    - job: "smoke relwithdeb cached"
      artifacts: true
      optional: true
    - job: "smoke relwithdeb clean"
      artifacts: true
      optional: true
    - *txrx-lib
    - *retina-needs

.zmq:
  stage: zmq
  extends: .e2e-run
  variables:
    TESTBED: "zmq"
    E2E_LOG_LEVEL: "info"
  needs:
    - job: "basic relwithdeb"
      artifacts: true
    - *txrx-lib
    - *retina-needs

.zmq-uesim:
  stage: zmq
  extends: .e2e-run
  variables:
    GROUP: uesim
    TESTBED: zmq_uesim
    E2E_LOG_LEVEL: "info"
    RETINA_LAUNCHER_ARGS: "--retina-pod-timeout 900"
  needs:
    - job: "basic relwithdeb"
      artifacts: true
    - job: "build uesim zmq driver"
      artifacts: true
    - *retina-needs

srsue:
  extends: .zmq
  variables:
    TESTBED: "zmq_srsue"
    MARKERS: "zmq_srsue"

amari 1UE:
  extends: .zmq-uesim
  variables:
    MARKERS: "zmq_single_ue"
    RETINA_PARAM_ARGS: "gnb.all.pcap=True gnb.all.rlc_enable=True gnb.all.enable_integrity_protection=True"

amari 1UE 4x4 mimo:
  extends: .zmq-uesim
  variables:
    MARKERS: "zmq_4x4_mimo"
    RETINA_PARAM_ARGS: "gnb.all.enable_integrity_protection=True"

amari 1UE rtsan:
  extends: .zmq
  variables:
    KEYWORDS: "bidirectional"
    MARKERS: "zmq_single_ue"
    RETINA_PARAM_ARGS: "gnb.all.pcap=True gnb.all.rlc_enable=True gnb.all.enable_integrity_protection=True"
  needs:
    - job: "basic rtsan"
      artifacts: true
    - *txrx-lib
    - *retina-needs
  allow_failure: true

amari 4UE deb:
  extends: .zmq
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests OpenSource/
  variables:
    TESTBED: "zmq_deb"
    MARKERS: "smoke"
    RETINA_PARAM_ARGS: "gnb.all.enable_integrity_protection=True"
  needs:
    - job: "basic package"
      artifacts: true
    - *txrx-lib
    - *retina-needs

amari 4UE asan:
  extends: .zmq-uesim
  variables:
    MARKERS: "smoke"
    KEYWORDS: "iperf"
    RETINA_PARAM_ARGS: "gnb.all.pcap=True gnb.all.mac_enable=True gnb.all.rlc_enable=True gnb.all.enable_integrity_protection=True"
  needs:
    - job: "basic asan"
      artifacts: true
    - *txrx-lib
    - *retina-needs

amari 4UE tsan:
  extends: .zmq-uesim
  variables:
    MARKERS: "smoke"
    KEYWORDS: "iperf"
    RETINA_PARAM_ARGS: "gnb.all.pcap=True gnb.all.mac_enable=True gnb.all.rlc_enable=True gnb.all.enable_integrity_protection=True"
  needs:
    - job: "basic tsan"
      artifacts: true
    - *txrx-lib
    - *retina-needs

amari 4UE memcheck:
  extends: .zmq-uesim
  variables:
    MARKERS: "zmq_valgrind"
    E2E_LOG_LEVEL: "warning"
    RETINA_PARAM_ARGS: "gnb.all.pcap=True gnb.all.mac_enable=True gnb.all.rlc_enable=True gnb.all.enable_integrity_protection=True"
  needs:
    - job: "basic memcheck"
      artifacts: true
    - *txrx-lib
    - *retina-needs

amari 8UE:
  extends: .zmq-uesim
  variables:
    MARKERS: "zmq and not smoke"
    RETINA_PARAM_ARGS: "gnb.all.pcap=True gnb.all.rlc_enable=False gnb.all.enable_integrity_protection=True"
  timeout: 4h
  parallel:
    matrix:
      - KEYWORDS:
          [
            "reestablishment and sequentially",
            "handover and sequentially",
            "attach_detach",
          ]

amari 8UE beta:
  extends: amari 8UE
  parallel:
    matrix:
      - KEYWORDS:
          [
            "reestablishment and not sequentially",
            "handover and not sequentially",
          ]
  when: manual
  allow_failure: true

amari 32UE:
  extends: .zmq
  variables:
    MARKERS: "zmq and not smoke"
    RETINA_PARAM_ARGS: "gnb.all.pcap=True gnb.all.rlc_enable=False gnb.all.enable_integrity_protection=True"
  parallel:
    matrix:
      - KEYWORDS:
          [
            "iperf and udp and band:3",
            "iperf and udp and not band:3",
            "iperf and tcp and band:3",
            "iperf and tcp and not band:3",
          ]

amari 32UE [ping]:
  extends: .zmq-uesim
  variables:
    MARKERS: "zmq and not smoke"
    RETINA_PARAM_ARGS: "gnb.all.pcap=True gnb.all.rlc_enable=False gnb.all.enable_integrity_protection=True"
    KEYWORDS: "ping and 32"

amari 32UE 2x2 mimo:
  extends: .zmq-uesim
  variables:
    MARKERS: "zmq_2x2_mimo"
    RETINA_PARAM_ARGS: "gnb.all.pcap=True gnb.all.rlc_enable=False gnb.all.enable_integrity_protection=True"

cudu amari 8UE:
  extends: .zmq
  timeout: 2h
  variables:
    TESTBED: zmq_cudu
    MARKERS: "zmq and not smoke"
    RETINA_PARAM_ARGS: "gnb.all.pcap=True gnb.all.rlc_enable=False gnb.all.enable_integrity_protection=True"
  parallel:
    matrix:
      - KEYWORDS: ["reestablishment and sequentially"]

cudu amari 32UE:
  extends: .zmq
  timeout: 2h
  variables:
    TESTBED: zmq_cudu
    MARKERS: "zmq and not smoke"
    RETINA_PARAM_ARGS: "gnb.all.pcap=True gnb.all.rlc_enable=False gnb.all.enable_integrity_protection=True"
  parallel:
    matrix:
      - KEYWORDS: ["iperf and tcp and not band:3 and bandwidth:50"]

cudu amari 64UE:
  extends: .zmq
  timeout: 3h
  variables:
    TESTBED: zmq_cudu
    MARKERS: "zmq and not smoke"
    RETINA_PARAM_ARGS: "gnb.all.pcap=True gnb.all.rlc_enable=False gnb.all.enable_integrity_protection=True"
    KEYWORDS: "ping and 64"

ric:
  extends: .zmq
  variables:
    TESTBED: "zmq_ric"
    MARKERS: "zmq_ric"

################################################################################
# TEST MODE
################################################################################

test mode ue:
  stage: zmq
  extends: .e2e-run
  variables:
    TESTBED: "test_mode"
    MARKERS: "test_mode"
    KEYWORDS: "test_ue"
    E2E_LOG_LEVEL: "warning"
  needs:
    - job: "basic relwithdeb"
      artifacts: true
    - *retina-needs

test mode ue asan:
  extends: test mode ue
  needs:
    - job: "basic asan"
      artifacts: true
    - *retina-needs

test mode ue memcheck:
  extends: test mode ue
  needs:
    - job: "basic memcheck"
      artifacts: true
    - *retina-needs

test mode ru:
  stage: zmq
  extends: .e2e-run
  variables:
    GROUP: "viavi"
    TESTBED: "viavi"
    MARKERS: "test_mode"
    KEYWORDS: "test_ru"
    E2E_LOG_LEVEL: "warning"
    RETINA_LAUNCHER_ARGS: "--retina-pod-timeout 900"
  needs:
    - job: "basic ru dummy"
      artifacts: true
    - *txrx-lib
    - *retina-needs

test mode ru tsan:
  extends: test mode ru
  variables:
    MARKERS: "test_mode_not_crash"
  needs:
    - job: "basic tsan"
      artifacts: true
    - *txrx-lib
    - *retina-needs

test mode ru asan:
  extends: test mode ru
  variables:
    MARKERS: "test_mode_not_crash"
  needs:
    - job: "basic asan"
      artifacts: true
    - *txrx-lib
    - *retina-needs

test mode ru memcheck:
  extends: test mode ru
  variables:
    MARKERS: "test_mode_not_crash"
  needs:
    - job: "basic memcheck"
      artifacts: true
    - *txrx-lib
    - *retina-needs

test mode ru acc100:
  extends: test mode ru
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests Plugin/
  variables:
    TESTBED: "test_mode_acc100"
    MARKERS: "test_mode_acc100"
    KEYWORDS: ""

################################################################################
# RF
################################################################################

.rf:
  stage: rf
  extends: .e2e-run
  variables:
    GROUP: "rf"
    TESTBED: "rf_b200"
    MARKERS: "rf"
    E2E_LOG_LEVEL: "warning"
  needs:
    - job: "basic relwithdeb"
      artifacts: true
    - *retina-needs

amari b200 asan:
  extends: .rf
  variables:
    MARKERS: "rf_not_crash"
  needs:
    - job: "basic asan"
      artifacts: true
    - *retina-needs

validate b200 config:
  extends: .rf
  variables:
    MARKERS: "rf_b200"

################################################################################
# Android
###############################################################################

android b200:
  stage: rf
  extends: .e2e-run
  variables:
    GROUP: "rf"
    TESTBED: "android_b200"
    MARKERS: "android"
    KEYWORDS: "not ims"
    E2E_LOG_LEVEL: "warning"
    KUBECONFIG_VAR_NAME: "RETINA_NAMESPACE_KUBECONFIG"
    KUBECONFIG_VAR_NAME_EXTRA: "RETINA_NAMESPACE_KUBECONFIG_EXTRA"
  needs:
    - job: "basic relwithdeb"
      artifacts: true
    - *retina-needs

android IMS:
  stage: rf
  extends: .e2e-run
  variables:
    GROUP: "rf"
    TESTBED: "android_callbox"
    MARKERS: "android"
    KEYWORDS: "ims"
    E2E_LOG_LEVEL: "warning"
    KUBECONFIG_VAR_NAME: "RETINA_NAMESPACE_KUBECONFIG"
    KUBECONFIG_VAR_NAME_EXTRA: "RETINA_NAMESPACE_KUBECONFIG_EXTRA"
    RETINA_PARAM_ARGS: "gnb.all.pcap=True gnb.all.mac_enable=True"
  needs:
    - job: "basic relwithdeb"
      artifacts: true
    - *retina-needs

android x300:
  stage: rf
  extends: .e2e-run
  variables:
    GROUP: "rf"
    TESTBED: "android_x300"
    MARKERS: "android_hp"
    E2E_LOG_LEVEL: "info"
    KUBECONFIG_VAR_NAME: "RETINA_NAMESPACE_KUBECONFIG"
    KUBECONFIG_VAR_NAME_EXTRA: "RETINA_NAMESPACE_KUBECONFIG_EXTRA"
  needs:
    - job: "basic relwithdeb"
      artifacts: true
    - *retina-needs

android drx:
  stage: rf
  extends: .e2e-run
  allow_failure: true
  variables:
    GROUP: "rf"
    TESTBED: "android_b200"
    MARKERS: "android_drx"
    E2E_LOG_LEVEL: "info"
    KUBECONFIG_VAR_NAME: "RETINA_NAMESPACE_KUBECONFIG"
    KUBECONFIG_VAR_NAME_EXTRA: "RETINA_NAMESPACE_KUBECONFIG_EXTRA"
  needs:
    - job: "basic relwithdeb"
      artifacts: true
    - *retina-needs

################################################################################
# VIAVI
###############################################################################
.viavi:
  stage: rf
  extends: .e2e-run
  timeout: 8h
  variables:
    GROUP: "viavi"
    TESTBED: "viavi"
    MARKERS: "viavi"
    E2E_LOG_LEVEL: "warning"
    KUBECONFIG_VAR_NAME: "RETINA_NAMESPACE_KUBECONFIG"
    KUBECONFIG_VAR_NAME_EXTRA: "RETINA_NAMESPACE_KUBECONFIG_EXTRA"
    RETINA_PARAM_ARGS: "gnb.all.pcap=True gnb.all.rlc_enable=True gnb.all.rlc_rb_type=srb"
    RETINA_LAUNCHER_ARGS: "--retina-pod-timeout 900"

viavi:
  extends: .viavi
  needs:
    - job: "basic avx512 dpdk"
      artifacts: true
    - *retina-needs
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests Plugin/
  parallel:
    matrix:
      - KEYWORDS:
          [
            "ideal and 1UE and not MIMO",
            "ideal and 1UE and MIMO",
            "ideal and 32UE and not experimental and not tdd and not extended",
            "tdd",
            "fading and 1UE and not MIMO",
            "fading and 1UE and MIMO",
            "fading and 32UE",
            "birth-death and 1UE",
            "32UE and experimental and not extended",
          ]

viavi-extended:
  extends: .viavi
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    KEYWORDS: "extended and not 24h"
  timeout: 28 hours
  needs:
    - job: "basic avx512 dpdk"
      artifacts: true
    - *retina-needs

viavi-extended-24h:
  extends: .viavi
  timeout: 28 hours
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    KEYWORDS: "extended and 24h"
  needs:
    - job: "basic avx512 dpdk"
      artifacts: true
    - *retina-needs

viavi-debug:
  extends: .viavi
  variables:
    MARKERS: "viavi_debug"
  when: manual
  needs:
    - job: "basic avx512 dpdk withassert"
      artifacts: true
    - *retina-needs

viavi-rtsan:
  extends: .viavi
  needs:
    - job: "basic avx512 dpdk rtsan"
      artifacts: true
    - *retina-needs
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests Plugin/
  parallel:
    matrix:
      - KEYWORDS: ["tdd and 6u3d"]
  allow_failure: true

################################################################################
# Garbage collector
################################################################################
retina setup:
  stage: ci
  extends:
    - .prepare_test
  retry: 2
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
      when: always
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: always
  interruptible: false
  image:
    name: ${RETINA_REGISTRY_PREFIX}/launcher:${RETINA_VERSION}
    entrypoint: ["/bin/sh", "-c"]
  tags:
    - retina-e2e-amd64
  script:
    - |
      retina-garbage-collector --mode demolition
  needs:
    - *retina-needs

retina runners:
  stage: ci
  allow_failure: true
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
      variables:
        CI_DESCRIPTION: "Lab Runner Manager"
        DISABLE_MODE: "nightly"
        ON_SCHEDULE: "true"
        NOTIFY_SLACK: "false"
    - if: $CI_DESCRIPTION =~ /Weekly/
      variables:
        CI_DESCRIPTION: "Lab Runner Manager"
        DISABLE_MODE: "weekly"
        ON_SCHEDULE: "true"
        NOTIFY_SLACK: "false"
  inherit:
    variables: false
  trigger:
    project: softwareradiosystems/ci/infrastructure
    branch: main
  needs:
    - job: "retina setup"
      artifacts: false
